// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWSClient is a mock of WSClient interface
type MockWSClient struct {
	ctrl     *gomock.Controller
	recorder *MockWSClientMockRecorder
}

// MockWSClientMockRecorder is the mock recorder for MockWSClient
type MockWSClientMockRecorder struct {
	mock *MockWSClient
}

// NewMockWSClient creates a new mock instance
func NewMockWSClient(ctrl *gomock.Controller) *MockWSClient {
	mock := &MockWSClient{ctrl: ctrl}
	mock.recorder = &MockWSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWSClient) EXPECT() *MockWSClientMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockWSClient) Connect() error {
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockWSClientMockRecorder) Connect() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockWSClient)(nil).Connect))
}

// Mockresponser is a mock of responser interface
type Mockresponser struct {
	ctrl     *gomock.Controller
	recorder *MockresponserMockRecorder
}

// MockresponserMockRecorder is the mock recorder for Mockresponser
type MockresponserMockRecorder struct {
	mock *Mockresponser
}

// NewMockresponser creates a new mock instance
func NewMockresponser(ctrl *gomock.Controller) *Mockresponser {
	mock := &Mockresponser{ctrl: ctrl}
	mock.recorder = &MockresponserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockresponser) EXPECT() *MockresponserMockRecorder {
	return m.recorder
}

// Print mocks base method
func (m *Mockresponser) Print(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Print", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Print indicates an expected call of Print
func (mr *MockresponserMockRecorder) Print(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*Mockresponser)(nil).Print), arg0)
}

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method
func (m *MockConnection) ReadMessage() (int, []byte, error) {
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage
func (mr *MockConnectionMockRecorder) ReadMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockConnection)(nil).ReadMessage))
}

// WriteMessage mocks base method
func (m *MockConnection) WriteMessage(arg0 int, arg1 []byte) error {
	ret := m.ctrl.Call(m, "WriteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *MockConnectionMockRecorder) WriteMessage(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockConnection)(nil).WriteMessage), arg0, arg1)
}
